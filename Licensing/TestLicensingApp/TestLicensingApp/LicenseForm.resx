<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAe0AAAA6CAYAAACd+AHYAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAL
        EgAACxIB0t1+/AAAABx0RVh0U29mdHdhcmUAQWRvYmUgRmlyZXdvcmtzIENTNui8sowAAA+VSURBVHhe
        7Z17sFXjH8YjihMJJXdNSEUjHE4oijDFKDqI6Yo4leQ+bn8kl0yNQjSMXHLNqIimGddyixkpTO65hUhE
        E4qc3t983tZ7Wnutd6299j57F7+ez8wzZ+/3tvY+/zz7vX2/DYwQQgghSk5tba39O3r0aNO4cWMzZcoU
        +74+yLSFEEKIErJ27VqzevVq8+STT5qRI0eaefPmmQYNGpi9997brFq1KmhVHDJtIYQQokSsXLnSfPHF
        F6Zr167mo48+Mm3atDHvvvuuGTFihDXuUaNGBS2LQ6YthBBC1JNff/3VzrDPO+88M3v2bDNgwAC7LD5t
        2jRzwgknmK+//to0adLENG3a1L4uFpm2EEIIUSS///67Wbp0qZk8ebI599xzzaxZs0xVVZX59ttvzb77
        7muWLFli3z/22GNm0qRJdrY9bNiwoHfhyLSFEEKIIvjkk0/MokWLTGVlpfn888/NoYceat5++21TXV1t
        7r//fjNmzBjTv39/2+bhhx82EydOtKa99dZbmw8++CAYpTBk2kIIIUQBfPPNN+ann34y3bp1M08//bSd
        OV9//fVm+vTppnv37mbhwoVm9913t7Ptp556yvzzzz/mhhtusIbtdNpppwWjFYZMWwghxGbPsmXL7H70
        +eefn6OXX345aLEeZtC77babNeo5c+bYWTbmzIGzDz/80HTp0sU8/vjjtm7mzJnWnPv27WsWLFhgKioq
        6kyb2fZLL70UjJodmbYQQojNntdffz1nJuyEcYd57733TKtWrWwdS+K9e/c29913n7n55pvtUvjff/9t
        ZsyYYa6++mqzzTbb1I3DCXLK3Ht09NFHm3Xr1gUjZ0OmLYQQYrMnq2kDJk1dr169zPvvv286duxofvnl
        F3sIbezYsWavvfaKjcMVMA6s7bzzzjnlTzzxRDBqNmTaQgghNnsKMW32qDt06GDrn3/+eWvczKRZ7o72
        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
</value>
  </data>
</root>